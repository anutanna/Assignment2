// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CUSTOMER
  VENDOR
  ADMIN
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  email    String   @unique
  password String
  address  String?
  phone    String?
  avatar   String?
  role     UserRole @default(CUSTOMER)

  orders   Order[]    @relation("OrderUser")
  business Business[] @relation("BusinessUser")

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  wishlistItems WishlistItem[]

  @@map("users")
}

model Business {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userOwnerId String  @db.ObjectId
  name        String
  email       String  @unique
  phone       String?
  address     String?
  website     String?
  logo        String?
  description String?
  rating      Float?  @default(0.0)

  user     User      @relation(fields: [userOwnerId], references: [id], name: "BusinessUser")
  products Product[] @relation("ProductBusiness")
  orders   Order[]   @relation("OrderBusiness")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("businesss")
}

model Brand {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  logo        String?
  website     String?
  products    Product[] @relation("ProductBrand")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("brands")
}

model Product {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  stock       Int

  businessId String   @db.ObjectId
  business   Business @relation(fields: [businessId], references: [id], name: "ProductBusiness")
  brandId    String   @db.ObjectId
  brand      Brand    @relation(fields: [brandId], references: [id], name: "ProductBrand")

  orderItems OrderItem[]         @relation("OrderItemProduct")
  images     ProductImage[]      @relation("ProductImageProduct")
  categories ProductToCategory[] @relation("ProductCategories")

  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  wishlistItems WishlistItem[]

  @@index([businessId])
  @@map("products")
}

model ProductImage {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], name: "ProductImageProduct")

  url     String
  altText String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@map("product_images")
}

model ProductCategory {
  id                     String              @id @default(auto()) @map("_id") @db.ObjectId
  categoryName           String              @unique
  categoryDescription    String?
  subCategoryName        String?
  subCategoryDescription String?
  products               ProductToCategory[] @relation("ProductCategories")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("product_categories")
}

model ProductToCategory {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  productId  String @db.ObjectId
  categoryId String @db.ObjectId

  product  Product         @relation(fields: [productId], references: [id], name: "ProductCategories")
  category ProductCategory @relation(fields: [categoryId], references: [id], name: "ProductCategories")

  @@unique([productId, categoryId])
  @@map("product_to_category")
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  userId     String      @db.ObjectId
  user       User        @relation(fields: [userId], references: [id], name: "OrderUser")
  businessId String      @db.ObjectId
  business   Business    @relation(fields: [businessId], references: [id], name: "OrderBusiness")
  orderItems OrderItem[] @relation("OrderItemOrder")

  total           Float
  status          OrderStatus @default(PENDING)
  shippingAddress String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([userId])
  @@index([businessId])
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id], name: "OrderItemOrder")
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], name: "OrderItemProduct")

  quantity Int
  price    Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model CartItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  productId String @db.ObjectId
  quantity  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId], name: "userId_productId")
  @@map("cart_items")
}

model WishlistItem {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  productId String @db.ObjectId

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId], name: "userId_productId")
  @@map("wishlist_items")
}
